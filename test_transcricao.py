import unittest
import requests
import json
import time
from typing import Dict, Any


class TestTranscricaoAPI(unittest.TestCase):
    BASE_URL = "http://89.116.171.102:9199"
    TEST_VIDEO = "https://www.youtube.com/watch?v=dQw4w9WgXcQ"  # Video com legenda garantida

    def make_request(self, video_url: str) -> requests.Response:
        """Fun√ß√£o auxiliar para fazer requisi√ß√µes √† API"""
        payload = {"video_url": video_url}
        return requests.post(
            f"{self.BASE_URL}/transcricao",
            json=payload,
            headers={"Content-Type": "application/json"}
        )

    def setUp(self):
        """Verifica se a API est√° online antes de cada teste"""
        try:
            response = requests.get(f"{self.BASE_URL}/ping")
            self.assertEqual(response.status_code, 200)
            self.assertEqual(response.json()["status"], "ok")
        except requests.RequestException:
            self.fail("‚ùå API n√£o est√° rodando! Execute 'python main.py' primeiro.")

    def test_ping(self):
        """Testa se o endpoint de ping est√° funcionando"""
        response = requests.get(f"{self.BASE_URL}/ping")
        self.assertEqual(response.status_code, 200)
        data = response.json()
        self.assertEqual(data["status"], "ok")
        self.assertEqual(data["message"], "API operacional")
        print("‚úÖ API est√° respondendo corretamente")

    def test_transcricao_video_valido(self):
        """Testa transcri√ß√£o com um v√≠deo v√°lido"""
        response = self.make_request(self.TEST_VIDEO)
        
        # Se o v√≠deo n√£o tiver legendas, √© aceit√°vel receber 400
        if response.status_code == 400:
            data = response.json()
            self.assertEqual(data["status"], "erro")
            self.assertTrue("legenda" in data["mensagem"].lower())
            print("‚ö†Ô∏è V√≠deo n√£o tem legenda dispon√≠vel (comportamento esperado)")
        else:
            self.assertEqual(response.status_code, 200)
            data = response.json()
            self.assertEqual(data["status"], "ok")
            self.assertTrue(isinstance(data["transcricao"], list))
            print("‚úÖ Transcri√ß√£o obtida com sucesso")

    def test_transcricao_url_invalida(self):
        """Testa o comportamento com URL inv√°lida"""
        response = self.make_request("https://www.youtube.com/watch?v=invalid")
        self.assertEqual(response.status_code, 400)
        data = response.json()
        self.assertEqual(data["status"], "erro")
        self.assertTrue(isinstance(data["mensagem"], str))
        print("‚úÖ URL inv√°lida tratada corretamente")

    def test_transcricao_sem_url(self):
        """Testa o comportamento quando nenhuma URL √© fornecida"""
        response = requests.post(
            f"{self.BASE_URL}/transcricao",
            json={},
            headers={"Content-Type": "application/json"}
        )
        self.assertEqual(response.status_code, 400)
        data = response.json()
        self.assertEqual(data["status"], "erro")
        self.assertEqual(data["mensagem"], "URL do v√≠deo n√£o fornecida")
        print("‚úÖ Requisi√ß√£o sem URL tratada corretamente")

    def test_cache(self):
        """Testa se o cache est√° funcionando"""
        # Primeira requisi√ß√£o
        start_time = time.time()
        response1 = self.make_request(self.TEST_VIDEO)
        time1 = time.time() - start_time

        if response1.status_code == 200:  # S√≥ testa cache se a primeira requisi√ß√£o funcionou
            # Segunda requisi√ß√£o (deve ser mais r√°pida por causa do cache)
            start_time = time.time()
            response2 = self.make_request(self.TEST_VIDEO)
            time2 = time.time() - start_time

            self.assertEqual(response2.status_code, 200)
            self.assertTrue(
                time2 < time1,
                f"Segunda requisi√ß√£o n√£o foi mais r√°pida: {time2:.2f}s > {time1:.2f}s"
            )
            print(f"‚úÖ Cache funcionando (2¬™ requisi√ß√£o {(time1-time2):.2f}s mais r√°pida)")


if __name__ == "__main__":
    print("\nüöÄ Iniciando testes da API de Transcri√ß√£o do YouTube...\n")
    unittest.main(verbosity=2)
